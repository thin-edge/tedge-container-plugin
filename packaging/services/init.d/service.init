#!/bin/sh
### BEGIN INIT INFO
# Provides:          tedge-container-plugin
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: thin-edge.io container monitor
# Description:       Monitor container running on the device
### END INIT INFO

[ -f /etc/tedge-container-plugin/env ] && . /etc/tedge-container-plugin/env

dir="/var"
cmd="/usr/bin/tedge-container run /usr/bin/tedge-container run --config /etc/tedge/plugins/tedge-container-plugin.toml"
user="root"

name=$(basename "$0")
pid_file="/var/run/$name.pid"
stdout_log="/var/log/$name.log"
stderr_log="/var/log/$name.err"

# Check if sudo or su is installed, otherwise don't use it
SUDO=""
if command -V sudo >/dev/null 2>&1; then
  SUDO="sudo"
  if [ -n "$user" ]; then
    SUDO="sudo -u $user"
  fi
elif command -V su >/dev/null 2>&1; then
  SUDO="su"
  if [ -n "$user" ]; then
    SUDO="su - $user"
  fi
fi

get_pid() { cat "$pid_file"; }

is_running() {
  # shellcheck disable=SC2009
  # Use ps/grep fallback as busybox does not support the "ps -p" option
  [ -f "$pid_file" ] && (ps | grep "^[[:blank:]]*$(get_pid)" >/dev/null 2>&1)
}

case "$1" in
    start)
      if is_running; then
          echo "Already started"
      else
          echo "Starting $name (using '$SUDO $cmd')"
          cd "$dir" || (echo "Failed changing directory"; exit 1)
          $SUDO $cmd >> "$stdout_log" 2>> "$stderr_log" &
          echo $! > "$pid_file"

          i=10
          printf "Waiting for %s.." "$name"
          while [ $i -gt 0 ]; do
            if is_running; then
                break
            fi
            printf "."
            i=$((i-1))
            sleep 1
          done

          if ! is_running; then
              echo "Unable to start, see $stdout_log and $stderr_log"
              exit 1
          else
            echo "started"
          fi
      fi
      ;;
    stop)
      if is_running; then
          printf "Stopping (pid=%s) %s.." "$(get_pid)" "$name"
          kill "$(get_pid)"
          i=10
          while [ $i -gt 0 ]; do
            if ! is_running; then
                  break
              fi
              printf "."
              i=$((i-1))
              sleep 1
          done
          echo

          if is_running; then
              echo "Not stopped; may still be shutting down or shutdown may have failed"
              exit 1
          else
              echo "stopped"
              if [ -f "$pid_file" ]; then
                  rm "$pid_file"
              fi
          fi
      else
          echo "Not running"
      fi
      ;;
    reload)
      if is_running; then
          echo "Reloading configuration"
          kill -HUP "$(get_pid)"
      else
          echo "Not running"
      fi
      ;;
    restart)
      "$0" stop
      if is_running; then
          echo "Unable to stop, will not attempt to start"
          exit 1
      fi
      "$0" start
      ;;
    status)
      if is_running; then
          echo "Running"
      else
          echo "Stopped"
          exit 1
      fi
      ;;
    *)
      echo "Usage: $0 {start|stop|reload|restart|status}"
      exit 1
      ;;
esac

exit 0
